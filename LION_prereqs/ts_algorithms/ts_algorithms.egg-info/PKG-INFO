Metadata-Version: 2.1
Name: ts-algorithms
Version: 0.1.0
Summary: A collection of common algorithms for tomosipo
Home-page: https://github.com/ahendriksen/ts_algorithms
Author: Allard Hendriksen
Author-email: allard.hendriksen@cwi.nl
License: GNU General Public License v3
Keywords: ts_algorithms
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Provides-Extra: dev
License-File: LICENSE.md

# Tomosipo algorithms

A collection of common tomographic reconstruction algorithms
implemented using the [tomosipo](https://github.com/ahendriksen/tomosipo) package.

The following algorithms are implemented:

- FBP
- FDK
- SIRT
- tv_min: Total-variation regularized least squares with the Champbolle Pock method
- nag_ls: l2-regularized least squares with the Nesterov accelerated gradient descent(nag) method


Free software: GNU General Public License v3

## Getting Started

It takes a few steps to setup Tomosipo algorithms on your
machine. We recommend installing
[Anaconda package manager](https://www.anaconda.com/download/) for
Python 3.

### Installing with conda

Install with:
```
# Pytorch, CUDA, ASTRA and tqdm
conda install -n tomosipo pytorch=1.8 cudatoolkit=10.2 astra-toolbox tqdm -c pytorch -c astra-toolbox/label/dev
source activate tomosipo
# Install tomosipo
pip install git+https://github.com/ahendriksen/tomosipo.git
# Tomosipo algorithms
pip install git+https://github.com/ahendriksen/ts_algorithms.git
```

### Running

``` python
import torch
import tomosipo as ts
from ts_algorithms import fbp, sirt, tv_min2d, fdk, nag_ls

# Setup up volume and parallel projection geometry
vg = ts.volume(shape=(1, 256, 256))
pg = ts.parallel(angles=384, shape=(1, 384))
A = ts.operator(vg, pg)

# Create hollow cube phantom
x = torch.zeros(A.domain_shape)
x[:, 10:-10, 10:-10] = 1.0
x[:, 20:-20, 20:-20] = 0.0

# Forward project
y = A(x)

# reconstructions made with different algorithms
rec_fbp = fbp(A, y)
rec_sirt = sirt(A, y, num_iterations=100)
rec_tv_min = tv_min2d(A, y, 0.0001, num_iterations=100)
rec_nag_ls = nag_ls(A, y, num_iterations=100)
```

## Authors and contributors

* **Allard Hendriksen** - *Initial work*
* **Dirk Schut** - *FDK and nag_ls implementations, current maintainer*

See also the list of [contributors](https://github.com/ahendriksen/ts_algorithms/contributors) who participated in this project.

## How to contribute

Contributions are always welcome. Please submit pull requests against the `master` branch.

If you have any issues, questions, or remarks, then please open an issue on GitHub.

## License

This project is licensed under the GNU General Public License v3 - see the [LICENSE.md](LICENSE.md) file for details.


# Changelog
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]
### Added
- Support for pytorch 1.7, 1.8 and higher.
- Batched filtering in FDK and FBP reconstruction to conserve memory.
- Support for overwriting sinogram in FDK and FBP to conserve memory.
### Fixed
- FDK/FBP: Force filter to be same size as padded sinogram.
### Removed
- Support for pytorch versions below 1.7.
- `reject_acyclic_filter` flag: not necessary anymore now that complex
  multiplication is available.

## 0.1.0 - 2021-06-03
### Added
- Initial release.

[Unreleased]: https://www.github.com/ahendriksen/ts_algorithms/compare/v0.1.0...develop
